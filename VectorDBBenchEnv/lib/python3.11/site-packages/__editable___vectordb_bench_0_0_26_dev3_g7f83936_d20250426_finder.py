from __future__ import annotations
import sys
from importlib.machinery import ModuleSpec, PathFinder
from importlib.machinery import all_suffixes as module_suffixes
from importlib.util import spec_from_file_location
from itertools import chain
from pathlib import Path

MAPPING: dict[str, str] = {'vectordb_bench': '/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench'}
NAMESPACES: dict[str, list[str]] = {'vectordb_bench.frontend': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/frontend'], 'vectordb_bench.results': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/results'], 'vectordb_bench.config-files': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/config-files'], 'vectordb_bench.custom': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/custom'], 'vectordb_bench.frontend.config': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/frontend/config'], 'vectordb_bench.frontend.components': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/frontend/components'], 'vectordb_bench.frontend.pages': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/frontend/pages'], 'vectordb_bench.frontend.components.get_results': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/frontend/components/get_results'], 'vectordb_bench.frontend.components.tables': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/frontend/components/tables'], 'vectordb_bench.frontend.components.run_test': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/frontend/components/run_test'], 'vectordb_bench.frontend.components.concurrent': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/frontend/components/concurrent'], 'vectordb_bench.frontend.components.check_results': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/frontend/components/check_results'], 'vectordb_bench.frontend.components.custom': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/frontend/components/custom'], 'vectordb_bench.backend.clients.clickhouse': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/clickhouse'], 'vectordb_bench.backend.clients.aliyun_elasticsearch': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/aliyun_elasticsearch'], 'vectordb_bench.backend.clients.chroma': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/chroma'], 'vectordb_bench.backend.clients.aws_opensearch': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/aws_opensearch'], 'vectordb_bench.backend.clients.mariadb': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/mariadb'], 'vectordb_bench.backend.clients.test': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/test'], 'vectordb_bench.backend.clients.pgvectorscale': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/pgvectorscale'], 'vectordb_bench.backend.clients.vespa': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/vespa'], 'vectordb_bench.backend.clients.memorydb': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/memorydb'], 'vectordb_bench.backend.clients.redis': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/redis'], 'vectordb_bench.backend.clients.zilliz_cloud': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/zilliz_cloud'], 'vectordb_bench.backend.clients.pgvector': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/pgvector'], 'vectordb_bench.backend.clients.qdrant_cloud': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/qdrant_cloud'], 'vectordb_bench.backend.clients.weaviate_cloud': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/weaviate_cloud'], 'vectordb_bench.backend.clients.mongodb': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/mongodb'], 'vectordb_bench.backend.clients.pinecone': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/pinecone'], 'vectordb_bench.backend.clients.tidb': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/tidb'], 'vectordb_bench.backend.clients.elastic_cloud': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/elastic_cloud'], 'vectordb_bench.backend.clients.pgvecto_rs': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/pgvecto_rs'], 'vectordb_bench.backend.clients.alloydb': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/alloydb'], 'vectordb_bench.backend.clients.aliyun_opensearch': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/aliyun_opensearch'], 'vectordb_bench.backend.clients.pgdiskann': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/pgdiskann'], 'vectordb_bench.backend.clients.clickzettalakehouse': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/clickzettalakehouse'], 'vectordb_bench.backend.clients.milvus': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/backend/clients/milvus'], 'vectordb_bench.results.PgVector': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/results/PgVector'], 'vectordb_bench.results.ElasticCloud': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/results/ElasticCloud'], 'vectordb_bench.results.Pinecone': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/results/Pinecone'], 'vectordb_bench.results.ZillizCloud': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/results/ZillizCloud'], 'vectordb_bench.results.QdrantCloud': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/results/QdrantCloud'], 'vectordb_bench.results.WeaviateCloud': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/results/WeaviateCloud'], 'vectordb_bench.results.Milvus': ['/Users/liangmo/Documents/GitHub/VectorDBBench/vectordb_bench/results/Milvus']}
PATH_PLACEHOLDER = '__editable__.vectordb_bench-0.0.26.dev3+g7f83936.d20250426.finder' + ".__path_hook__"


class _EditableFinder:  # MetaPathFinder
    @classmethod
    def find_spec(cls, fullname: str, path=None, target=None) -> ModuleSpec | None:  # type: ignore
        # Top-level packages and modules (we know these exist in the FS)
        if fullname in MAPPING:
            pkg_path = MAPPING[fullname]
            return cls._find_spec(fullname, Path(pkg_path))

        # Handle immediate children modules (required for namespaces to work)
        # To avoid problems with case sensitivity in the file system we delegate
        # to the importlib.machinery implementation.
        parent, _, child = fullname.rpartition(".")
        if parent and parent in MAPPING:
            return PathFinder.find_spec(fullname, path=[MAPPING[parent]])

        # Other levels of nesting should be handled automatically by importlib
        # using the parent path.
        return None

    @classmethod
    def _find_spec(cls, fullname: str, candidate_path: Path) -> ModuleSpec | None:
        init = candidate_path / "__init__.py"
        candidates = (candidate_path.with_suffix(x) for x in module_suffixes())
        for candidate in chain([init], candidates):
            if candidate.exists():
                return spec_from_file_location(fullname, candidate)
        return None


class _EditableNamespaceFinder:  # PathEntryFinder
    @classmethod
    def _path_hook(cls, path) -> type[_EditableNamespaceFinder]:
        if path == PATH_PLACEHOLDER:
            return cls
        raise ImportError

    @classmethod
    def _paths(cls, fullname: str) -> list[str]:
        paths = NAMESPACES[fullname]
        if not paths and fullname in MAPPING:
            paths = [MAPPING[fullname]]
        # Always add placeholder, for 2 reasons:
        # 1. __path__ cannot be empty for the spec to be considered namespace.
        # 2. In the case of nested namespaces, we need to force
        #    import machinery to query _EditableNamespaceFinder again.
        return [*paths, PATH_PLACEHOLDER]

    @classmethod
    def find_spec(cls, fullname: str, target=None) -> ModuleSpec | None:  # type: ignore
        if fullname in NAMESPACES:
            spec = ModuleSpec(fullname, None, is_package=True)
            spec.submodule_search_locations = cls._paths(fullname)
            return spec
        return None

    @classmethod
    def find_module(cls, _fullname) -> None:
        return None


def install():
    if not any(finder == _EditableFinder for finder in sys.meta_path):
        sys.meta_path.append(_EditableFinder)

    if not NAMESPACES:
        return

    if not any(hook == _EditableNamespaceFinder._path_hook for hook in sys.path_hooks):
        # PathEntryFinder is needed to create NamespaceSpec without private APIS
        sys.path_hooks.append(_EditableNamespaceFinder._path_hook)
    if PATH_PLACEHOLDER not in sys.path:
        sys.path.append(PATH_PLACEHOLDER)  # Used just to trigger the path hook
